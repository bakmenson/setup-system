#+title: Setup System

#+property: header-args:shell :tangle setup-system.sh :shebang #!/bin/zsh

* Table of Contents :toc:
- [[#usage][Usage]]
- [[#update][Update]]
- [[#pre-install][Pre-install]]
- [[#install][Install]]
- [[#base-packages][Base packages]]
  - [[#apt][apt]]
  - [[#snap][snap]]
  - [[#pip][pip]]
- [[#oh-my-zsh][Oh-my-zsh]]
- [[#dotfiles][Dotfiles]]
- [[#programming-languages][Programming Languages]]
  - [[#python][python]]
  - [[#java][java]]
  - [[#kotlin][kotlin]]
  - [[#rust][rust]]
  - [[#javascript][javascript]]
  - [[#sql][sql]]
  - [[#bash][bash]]
- [[#install-jetbrains-ide][Install JetBrains IDE]]
- [[#emacs-config][Emacs Config]]
  - [[#emacs][emacs]]
  - [[#exwm][exwm]]
  - [[#cask][cask]]
  - [[#pdf-tools][pdf-tools]]
  - [[#tdlib-for-telega][tdlib for telega]]
- [[#automount-hdd][Automount HDD]]

* Usage

#+begin_src shell :tangle no
sudo apt install -y git
sudo snap install emacs --classic

git clone https://github.com/bakmenson/setup-system

bash setup-system/tangle.sh

bash setup-system/update.sh

# after reboot
bash setup-system/pre-install.sh

# after reboot
zsh setup-system/install.sh
#+end_src

* Update

#+begin_src shell :tangle update.sh :shebang #!/bin/bash
sudo apt update && sudo apt dist-upgrade && sudo snap refresh
reboot
#+end_src

* Pre-install

#+begin_src shell :tangle pre-install.sh :shebang #!/bin/bash
mkdir -p ~/dev
sudo apt install -y zsh
touch ~/.zshrc
chsh -s /bin/zsh
reboot
#+end_src

* Install

#+begin_src shell :tangle install.sh :shebang #!/bin/zsh
zsh setup-system/setup-system.sh

rm setup-system/update.sh
rm setup-system/pre-install.sh
rm install.sh
rm setup-system/setup-system.sh

mv ~/setup-system ~/dev/setup-system

echo "\n\nDone"
#+end_src

* Base packages
** apt

#+begin_src shell
sudo apt install -y cmake \
     make \
     wget \
     curl \
     mpv \
     htop \
     vim \
     neofetch \
     python3-pip \
     python3-venv \
     tree \
     gparted \
     inxi \
     ripgrep \
     xfce4-power-manager \
     sqlite3 \
     zsh \
     fzf \
     papirus-icon-theme \
     arc-theme \
     fonts-jetbrains-mono \
     feh \
     picom \
     lxappearance \
     unclutter \
     scrot \
     bat
#+end_src

** snap

#+begin_src shell
sudo snap install telegram-desktop
#+end_src

** pip

#+begin_src shell
python3 -m pip install graw
#+end_src

* Oh-my-zsh

#+begin_src shell
if [ -d ~/.oh-my-zsh ]; then rm -rf ~/.oh-my-zsh; fi

git clone https://github.com/ohmyzsh/ohmyzsh ~/.oh-my-zsh
git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
#+end_src

* Dotfiles

#+begin_src shell
if [ -d ~/dev/dotfiles ]; then rm -rf ~/dev/dotfiles; fi

git clone https://github.com/bakmenson/dotfiles.git ~/dev/dotfiles

emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/dev/dotfiles/README.org")'
#+end_src

* Programming Languages
** python
*** ipython

#+begin_src shell
python3 -m pip install ipython
#+end_src

*** pyenv

#+begin_src shell
sudo apt install -y make \
     build-essential \
     libssl-dev \
     zlib1g-dev \
     libbz2-dev \
     libreadline-dev \
     libsqlite3-dev \
     wget \
     curl \
     llvm \
     libncursesw5-dev \
     xz-utils \
     tk-dev \
     libxml2-dev \
     libxmlsec1-dev \
     libffi-dev \
     liblzma-dev

if [ -d ~/.pyenv ]; then rm -rf ~/.pyenv; fi

git clone https://github.com/pyenv/pyenv .pyenv
#+end_src

*** poetry

#+begin_src shell
source ~/.zshrc
curl -sSL https://install.python-poetry.org | python3 -
mkdir -p ~/.oh-my-zsh/plugins/poetry
poetry completions zsh > ~/.oh-my-zsh/plugins/poetry/_poetry || exit 1
#+end_src

** java

#+begin_src shell
sudo apt install -y openjdk-11-jdk \
     openjdk-11-source \
     openjdk-11-doc \
     openjdk-17-jdk \
     openjdk-17-source \
     openjdk-17-doc \
     maven

sudo snap install gradle --classic
#+end_src

** kotlin

#+begin_src shell
sudo snap install kotlin --classic
#+end_src

** rust

#+begin_src shell
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
#+end_src

** javascript

#+begin_src shell
sudo snap install node --classic
sudo npm install -g typescript typescript-language-server js-beautify
#+end_src

** sql
*** postgresql

#+begin_src shell
sudo apt install -y postgresql postgresql-contrib
#+end_src

** bash

#+begin_src shell
sudo npm i -g bash-language-server
#+end_src

* Install JetBrains IDE

#+begin_src shell
git clone https://github.com/bakmenson/jetbrains-downloader.git

python3 ~/jetbrains-downloader/downloader.py
rm -rf jetbrains-downloader

if [ -f ~/.profile ]; then echo export _JAVA_AWT_WM_NONREPARENTING=1 >> ~/.profile; fi
#+end_src

* Emacs Config
** emacs

#+begin_src shell
if [ -d ~/dev/emacs-config ]; then rm -rf ~/dev/emacs-config; fi

git clone https://github.com/bakmenson/emacs-config.git ~/dev/emacs-config
mkdir -p ~/.config/emacs
emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/dev/emacs-config/README.org")'
#+end_src

** exwm

#+begin_src shell
sudo tee /usr/share/xsessions/emacs.desktop > /dev/null <<EOT
[Desktop Entry]
Name=Emacs
Exec=emacs
Type=Application
EOT
#+end_src

** cask

#+begin_src shell
git clone https://github.com/cask/cask.git ~/.cask
source ~/.zshrc
#+end_src

** pdf-tools

#+begin_src shell
sudo apt install -y build-essential \
     libvterm-dev \
     libglib2.0-dev \
     libpng-dev \
     zlib1g-dev \
     libpoppler-glib-dev \
     libpoppler-private-dev \
     imagemagick \
     automake \
     autoconf

git clone https://github.com/politza/pdf-tools.git
cd pdf-tools
source ~/.zshrc
make -s || exit 1
cd ~/
#+end_src

** tdlib for telega

#+begin_src shell
sudo apt install -y build-essential \
     openssl \
     zlib1g \
     gperf \
     cmake

git clone https://github.com/tdlib/td.git
cd td
mkdir build && cd build
source ~/.zshrc
cmake ../ || exit 1
make -j2 || exit 1
sudo make install || exit 1
cd ~/
#+end_src

* Automount HDD

#+begin_src shell
sudo tee -a /etc/fstab > /dev/null <<EOT
UUID=6883E43D19D297F7 /run/media/solus/hdd/      ntfs  errors=remount-ro,auto,exec,rw,user 0   0
EOT
#+end_src
