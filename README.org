#+title: Setup System

#+property: header-args:shell :tangle-mode (identity #o555) :tangle setup-system.sh :shebang #!/bin/zsh

* Table of Contents :toc:
- [[#pre-install][Pre-install]]
- [[#update][Update]]
- [[#apt][Apt]]
- [[#base-packages][Base packages]]
- [[#wm][WM]]
  - [[#i3-gaps][i3-gaps]]
- [[#oh-my-zsh][Oh-my-zsh]]
- [[#dotfiles][Dotfiles]]
- [[#programming-languages][Programming Languages]]
  - [[#python][python]]
  - [[#java][java]]
  - [[#kotlin][kotlin]]
  - [[#rust][rust]]
  - [[#javascript][javascript]]
  - [[#sql][sql]]
  - [[#bash][bash]]
- [[#terminal][Terminal]]
  - [[#alacritty][alacritty]]
- [[#snap][Snap]]
- [[#install-jetbrains-ide][Install JetBrains IDE]]
- [[#emacs-config][Emacs Config]]
  - [[#emacs][emacs]]
  - [[#exwm][exwm]]
  - [[#cask][cask]]
  - [[#pdf-tools][pdf-tools]]
  - [[#tdlib-for-telega][tdlib for telega]]
- [[#automount-hdd][Automount HDD]]
- [[#usage][Usage]]

* Pre-install

#+begin_src shell
mkdir -p ~/dev
#+end_src

* Update

#+begin_src shell
#sudo apt update && sudo apt dist-upgrade && sudo snap refresh
#+end_src

* Apt

#+begin_src shell
#sudo apt install $(cat ~/setup-system/packages.txt)
#+end_src

* Base packages

#+begin_src shell
sudo apt install -y cmake \
     make \
     wget \
     curl \
     mpv \
     htop \
     neofetch \
     python3-pip \
     python3-venv \
     vim \
     tree \
     gparted \
     inxi \
     ripgrep \
     xfce4-power-manager \
     sqlite3 \
     zsh \
     fzf \
     papirus-icon-theme \
     arc-theme \
     fonts-jetbrains-mono
#+end_src

* WM
** i3-gaps

#+begin_src shell
# sudo apt install -y libxcb1-dev \
#      libxcb-keysyms1-dev \
#      libpango1.0-dev \
#      libxcb-util0-dev \
#      libxcb-icccm4-dev \
#      libyajl-dev \
#      libstartup-notification0-dev \
#      libxcb-randr0-dev \
#      libev-dev \
#      libxcb-cursor-dev \
#      libxcb-xinerama0-dev \
#      libxcb-xkb-dev \
#      libxkbcommon-dev \
#      libxkbcommon-x11-dev \
#      autoconf \
#      libxcb-xrm0 \
#      libxcb-xrm-dev \
#      automake \
#      libxcb-shape0-dev

# sudo apt install -y rofi \
#      feh \
#      dmune \
#      polybar \
#      scrot \
#      unclutter \
#      picom \
#      lxappearance

# sudo add-apt-repository ppa:regolith-linux/release
# sudo apt update
# sudo apt install i3-gaps
#+end_src

* Oh-my-zsh

#+begin_src shell
if [ -d ~/.oh-my-zsh ]; then rm -rf ~/.oh-my-zsh; fi

git clone https://github.com/ohmyzsh/ohmyzsh ~/.oh-my-zsh
git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
#+end_src

* Dotfiles

#+begin_src shell
if [ -d ~/dev/dotfiles ]; then rm -rf ~/dev/dotfiles; fi

git clone https://github.com/bakmenson/dotfiles.git ~/dev/dotfiles

emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/dev/dotfiles/README.org")'

sudo chmod +x ~/.config/polybar/polybar.sh
#+end_src

* Programming Languages
** python
*** ipython

#+begin_src shell
python3 -m pip install ipython
#+end_src

*** pyenv

#+begin_src shell
sudo apt install -y make \
     build-essential \
     libssl-dev \
     zlib1g-dev \
     libbz2-dev \
     libreadline-dev \
     libsqlite3-dev \
     wget \
     curl \
     llvm \
     libncursesw5-dev \
     xz-utils \
     tk-dev \
     libxml2-dev \
     libxmlsec1-dev \
     libffi-dev \
     liblzma-dev

if [ -d ~/.pyenv ]; then rm -rf ~/.pyenv; fi

git clone https://github.com/pyenv/pyenv .pyenv
#+end_src

*** poetry

#+begin_src shell
source ~/.zshrc
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python3 -
mkdir -p ~/.oh-my-zsh/plugins/poetry
poetry completions zsh > ~/.oh-my-zsh/plugins/poetry/_poetry || exit 1
#+end_src

** java

#+begin_src shell
sudo apt install -y openjdk-8-jdk \
     openjdk-8-source \
     openjdk-8-doc \
     openjdk-17-jdk \
     openjdk-17-source \
     openjdk-17-doc
#+end_src

** kotlin

#+begin_src shell
sudo snap install kotlin --classic
#+end_src

** rust

#+begin_src shell
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
#+end_src

** javascript

#+begin_src shell
sudo snap install node --classic
sudo npm install -g typescript typescript-language-server js-beautify
#+end_src

** sql
*** postgresql

#+begin_src shell
sudo apt install -y postgresql postgresql-contrib
#+end_src

** bash

#+begin_src shell
sudo npm i -g bash-language-server
#+end_src

* Terminal
** alacritty

#+begin_src shell
sudo apt install -y pkg-config \
     libfreetype6-dev \
     libfontconfig1-dev \
     libxcb-xfixes0-dev \
     libxkbcommon-dev

if [ -d ~/.alacritty ]; then rm -rf ~/.alacritty; fi

git clone https://github.com/alacritty/alacritty.git ~/.alacritty

cd ~/.alacritty
source ~/.zshrc
cargo build --release || exit 1
sudo cp target/release/alacritty /usr/local/bin
cd ~/
#+end_src

* Snap

#+begin_src shell
sudo snap install telegram-desktop
#+end_src

* Install JetBrains IDE

#+begin_src shell
git clone https://github.com/bakmenson/jetbrains-downloader.git
#while true; do
#	printf "\n"
#	python3 ~/jetbrains-downloader/downloader.py
#
#	printf "\nDo you want install another IDE? (y/n)"
#	read -s -n 1 answer
#	[[ $answer == "" || $answer == "y" ]] || break
#done
#rm -rf jetbrains-downloader

if [ -f ~/.profile ]; then echo export _JAVA_AWT_WM_NONREPARENTING=1 >> ~/.profile; fi
#+end_src

* Emacs Config
** emacs

#+begin_src shell
#sudo snap install emacs --classic

if [ -d ~/dev/emacs-config ]; then rm -rf ~/dev/emacs-config; fi

git clone https://github.com/bakmenson/emacs-config.git ~/dev/emacs-config
emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/dev/emacs-config/README.org")'
#+end_src

** exwm

#+begin_src shell
mkdir -p ~/.config/emacs/exwm
echo "[Desktop Entry]\nName=Emacs\nExec=emacs\nType=Application" >> ~/.config/emacs/exwm/emacs.desktop
sudo ln -sf ~/.config/emacs/exwm/emacs.desktop /usr/share/xsessions
#+end_src

** cask

#+begin_src shell
git clone https://github.com/cask/cask.git ~/.cask
source ~/.zshrc
#+end_src

** pdf-tools

#+begin_src shell
sudo apt install -y build-essential \
     libvterm-dev \
     libglib2.0-dev \
     libpng-dev \
     zlib1g-dev \
     libpoppler-glib-dev \
     libpoppler-private-dev \
     imagemagick \
     automake \
     autoconf

git clone https://github.com/politza/pdf-tools.git
cd pdf-tools
source ~/.zshrc
make -s || exit 1
cd ~/
#+end_src

** tdlib for telega

#+begin_src shell
sudo apt install -y build-essential \
     openssl \
     zlib1g \
     gperf \
     cmake

git clone https://github.com/tdlib/td.git
cd td
mkdir build && cd build
source ~/.zshrc
cmake ../ || exit 1
make -j2 || exit 1
sudo make install || exit 1
cd ~/
#+end_src

* Automount HDD

#+begin_src shell
sudo tee -a /etc/fstab > /dev/null <<EOT
UUID=6883E43D19D297F7 /run/media/solus/hdd/      ntfs  errors=remount-ro,auto,exec,rw,user 0   0
EOT
#+end_src

* Usage

#+begin_src shell :tangle no 
git clone https://github.com/bakmenson/setup-system

bash setup-system/pre-install.sh

# after reboot
zsh setup-system/install.sh
#+end_src
